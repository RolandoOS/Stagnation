# Part 2.1: Random forest.

# In this analysis we'll attempt to gather the most relevant meteorological variables (eulerean) that affect the concentrations of PM2.5 in the US during the summer. We'll sample MERRA gridpoints in the US and make a point-by-point data frame. We will split the contiguous US into 6 regions (as DaSilva did).

# ----------------------------------------------------------------------

# TASK: [1] Find the conditions under which high values happen.
#		[2] Time series plot of RF model.
#		[3] Determine skill of the models.

# --- Import tools and data --------------------------------------------

import matplotlib
import pandas  as pd
import numpy   as np
import seaborn as sns
import statsmodels.api   as sm
import matplotlib.pyplot as plt
from ggplot import *
from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import scale
from time import time

print plt.get_backend()

sns.set(style="white")

# Directory paths:

PATH_RES = '/Users/Rola/Documents/Science/JHU/ANALYSIS/Stagnation/'

# Load the data frame generated by the program stag_random_forest_0.py

DAT=pd.read_csv(PATH_RES+'Stagnation_random_forest_matrix_usa.csv', index_col='date', parse_dates=True)

DAT['wnd_500hPa']=np.sqrt(np.power(DAT['u_500hPa'],2)+np.power(DAT['v_500hPa'],2))
DAT['wnd_2m']=np.sqrt(np.power(DAT['u_2m'],2)+np.power(DAT['v_2m'],2))
data=pd.DataFrame(DAT, columns=['wnd_500hPa','wnd_2m','hgt_500hPa','precip','temp_2m','spec_humidity','slp','AmmSO4','OC','PM25','lat','lon'])

del DAT

# data=(data-data.mean())/data.std() # scaling

dat=data.resample('d', how='mean')

dat['2006-06':'2006-08'].ix[:,7:10].plot(); sns.plt.show()

# Regions:  (2650 points per location)
# N/S 40N
# West < -105W
# East > - 90W
#
#--NW--|--NC--|--NE--
#------|------|------
#--SW--|--SC--|--SE--

reg_NW=data[(data['lat']>40) & (data['lon']<-105)]
reg_NC=data[(data['lat']>40) & (data['lon']>-105) & (data['lon']<-90)]
reg_NE=data[(data['lat']>40) & (data['lon']>-90)]
reg_SW=data[(data['lat']<40) & (data['lon']<-105)]
reg_SC=data[(data['lat']<40) & (data['lon']>-105) & (data['lon']<-90)]
reg_SE=data[(data['lat']<40) & (data['lon']>-90)]

def plot_corr(data,name):
	plt.switch_backend('Agg')
	sns.heatmap(data, annot=True, square=True, cmap='BrBG', cbar_kws={"shrink": .75})
	plt.savefig(PATH_RES+name, dpi = 200, bbox_inches='tight');
	plt.show()
	plt.clf()

plot_corr(reg_NW.ix[:,[0,1,2,3,4,5,6,7]].corr(),'corr_matrix_NW_AmmSO4.png')
plot_corr(reg_NW.ix[:,[0,1,2,3,4,5,6,8]].corr(),'corr_matrix_NW_OC.png')
plot_corr(reg_NW.ix[:,[0,1,2,3,4,5,6,9]].corr(),'corr_matrix_NW_PM2.5.png')

plot_corr(reg_NC.ix[:,[0,1,2,3,4,5,6,7]].corr(),'corr_matrix_NC_AmmSO4.png')
plot_corr(reg_NC.ix[:,[0,1,2,3,4,5,6,8]].corr(),'corr_matrix_NC_OC.png')
plot_corr(reg_NC.ix[:,[0,1,2,3,4,5,6,9]].corr(),'corr_matrix_NC_PM2.5.png')

plot_corr(reg_NE.ix[:,[0,1,2,3,4,5,6,7]].corr(),'corr_matrix_NE_AmmSO4.png')
plot_corr(reg_NE.ix[:,[0,1,2,3,4,5,6,8]].corr(),'corr_matrix_NE_OC.png')
plot_corr(reg_NE.ix[:,[0,1,2,3,4,5,6,9]].corr(),'corr_matrix_NE_PM2.5.png')

plot_corr(reg_SW.ix[:,[0,1,2,3,4,5,6,7]].corr(),'corr_matrix_SW_AmmSO4.png')
plot_corr(reg_SW.ix[:,[0,1,2,3,4,5,6,8]].corr(),'corr_matrix_SW_OC.png')
plot_corr(reg_SW.ix[:,[0,1,2,3,4,5,6,9]].corr(),'corr_matrix_SW_PM2.5.png')

plot_corr(reg_SC.ix[:,[0,1,2,3,4,5,6,7]].corr(),'corr_matrix_SC_AmmSO4.png')
plot_corr(reg_SC.ix[:,[0,1,2,3,4,5,6,8]].corr(),'corr_matrix_SC_OC.png')
plot_corr(reg_SC.ix[:,[0,1,2,3,4,5,6,9]].corr(),'corr_matrix_SC_PM2.5.png')

plot_corr(reg_SE.ix[:,[0,1,2,3,4,5,6,7]].corr(),'corr_matrix_SE_AmmSO4.png')
plot_corr(reg_SE.ix[:,[0,1,2,3,4,5,6,8]].corr(),'corr_matrix_SE_OC.png')
plot_corr(reg_SE.ix[:,[0,1,2,3,4,5,6,9]].corr(),'corr_matrix_SE_PM2.5.png')

reg_NW['PM25']['2002'].resample('d', how='mean').plot(); plt.show()

# --- Test variables with GLM ------------------------------------------

X = data.ix[:,0:7]
X['intercept'] = 1.0

Y = data['AmmSO4']

glm=sm.GLM(Y,X, family=sm.families.Gaussian()).fit()
print glm.summary()

